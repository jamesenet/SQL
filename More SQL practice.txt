                           Counting Users
Log onto Mode Analytics and from the home page, create a new report by clicking on the green
plus sign button in the upper right-hand corner. Enter the starter code where provided for each
exercise. You may want to create a new tab for each exercise.
Please use the discussion forum for any questions and/or comments you might have. Once you
have tried the exercises, feel free to watch the solutions video. Good luck with your practice!
Note: When querying a table, remember to prepend dsv1069, which is the schema, or folder
that contains the course data.

Exercise 1: We’ll be using the users table to answer the question “How many new users are
added each day?“. Start by making sure you understand the columns in the table.
Starter Code:
SELECT * FROM dsv1069.users

Exercise 2: WIthout worrying about deleted user or merged users, count the number of users
added each day.
Starter Code: (none)

Exercise 3: Consider the following query. Is this the right way to count merged or deleted
users? If all of our users were deleted tomorrow what would the result look like?
Starter Code:
SELECT
date(created_at) AS day,
COUNT(*) AS users
FROM
dsv1069.users
WHERE
deleted_at IS NULL
AND
(id <> parent_user_id OR parent_user_id IS NULL)
GROUP BY
date(created_at)

Exercise 4: Count the number of users deleted each day. Then count the number of users
removed due to merging in a similar way.
Starter Code: (Use the result from #2 as a guide)

Exercise 5: Use the pieces you’ve built as subtables and create a table that has a column for
the date, the number of users created, the number of users deleted and the number of users
merged that day.
Starter Code:
(none)

Exercise 6: Refine your query from #5 to have informative column names and so that null
columns return 0.
Starter Code: (none)

Exercise 7:
What if there were days where no users were created, but some users were deleted or merged.
Does the previous query still work? No, it doesn’t. Use the dates_rollup as a backbone for this
query, so that we won’t miss any dates.
Starter Code:
SELECT * FROM dsv1069.dates_rollup

         SOLUTION
      -------------------
SELECT 
 new.day,
 new.new_user_added,
 COALESCE(deleted.deleted_users,0) AS deleted_users,
 COALESCE(merged.merged_users,0) AS merged_users,
 (new.new_user_added - COALESCE(deleted.deleted_users,0) - COALESCE(merged.merged_users,0))
 AS net_addded_users
FROM 
 (SELECT 
  date(created_at) AS day,
  COUNT(*) AS new_user_added
 FROM 
  dsv1069.users
 GROUP BY 
  date(created_at)
 ) new 
LEFT JOIN
  (SELECT 
    date(created_at) AS day,
    COUNT(*) AS deleted_users
  FROM 
    dsv1069.users
  WHERE 
    deleted_at IS NOT NULL
  GROUP BY 
    date(created_at)
  ) deleted
ON deleted.day = new.day
LEFT JOIN
  (SELECT 
    date(merged_at) AS day,
    COUNT(*) AS merged_users
  FROM 
    dsv1069.users
  WHERE 
    id <> parent_user_id 
  AND 
    parent_user_id IS NOT NULL
  GROUP BY 
     date(merged_at)
  )  merged
ON merged.day = new.day;





                                                   Create a Rollup Table
Log onto Mode Analytics and from the home page, create a new report by clicking on the green
plus sign button in the upper right-hand corner. Enter the starter code where provided for each
exercise. You may want to create a new tab for each exercise.
Please use the discussion forum for any questions and/or comments you might have. Once you
have tried the exercises, feel free to watch the solutions video. Good luck with your practice!
Note: When querying a table, remember to prepend dsv1069, which is the schema, or folder
that contains the course data.
Exercise 1: Create a subtable of orders per day. Make sure you decide whether you are
counting invoices or line items.
Starter Code:
Exercise 2: “Check your joins”. We are still trying to count orders per day. In this step join the
sub table from the previous exercise to the dates rollup table so we can get a row for every
date. Check that the join works by just running a “select *” query
Starter Code: (previous exercise)
Exercise 3: “Clean up your Columns” In this step be sure to specify the columns you actually
want to return, and if necessary do any aggregation needed to get a count of the orders madeper day.
Starter Code: (previous exercise)
Exercise 4: Weekly Rollup. Figure out which parts of the JOIN condition need to be edited
create 7 day rolling orders table.
Starter Code: Result from EX2 or EX3
Exercise 5: Column Cleanup. Finish creating the weekly rolling orders table, by performing
any aggregation steps and naming your columns appropriately.
Starter Code: Result form Ex4



     SOLUTIONS
   ------------------------

SELECT
  dates_rollup.date,
  COALESCE(SUM(orders),0)         AS orders,
  COALESCE(SUM(items_ordered),0)  AS items_ordered
FROM
 dsv1069.dates_rollup
 LEFT OUTER JOIN
   (
   SELECT 
     date(orders.paid_at)            AS day,
     COUNT(DISTINCT invoice_id)      AS orders,
     COUNT(DISTINCT line_item_id)    AS items_ordered
   FROM 
     dsv1069.orders
   GROUP BY 
     date(orders.paid_at)
    ) daily_orders
 ON 
  dates_rollup.date >= daily_orders.day
AND
  dates_rollup.d7_ago < daily_orders.day
GROUP BY 
    dates_rollup.date;